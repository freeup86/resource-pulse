const fs = require('fs');
const path = require('path');
const packageJson = require('../package.json');

// Fallback version info if version.json is not available
const fallbackVersion = {
  version: packageJson.version,
  buildNumber: 'dev',
  commitHash: 'unknown',
  commitHashShort: 'unknown',
  commitDate: new Date().toISOString(),
  commitMessage: 'Development build',
  buildDate: new Date().toISOString()
};

class VersionService {
  constructor() {
    this.versionInfo = fallbackVersion;
    this.loadVersionInfo();
  }

  loadVersionInfo() {
    try {
      // Try to load version.json (generated by git hook)
      const versionPath = path.join(__dirname, '../../version.json');
      if (fs.existsSync(versionPath)) {
        const versionData = fs.readFileSync(versionPath, 'utf8');
        this.versionInfo = JSON.parse(versionData);
      }
    } catch (error) {
      console.warn('Could not load version.json, using fallback version info');
    }
  }

  getVersion() {
    return this.versionInfo.version;
  }

  getFullVersionInfo() {
    return this.versionInfo;
  }

  getBuildNumber() {
    return this.versionInfo.buildNumber;
  }

  getCommitHash() {
    return this.versionInfo.commitHash;
  }

  getCommitHashShort() {
    return this.versionInfo.commitHashShort;
  }

  getCommitDate() {
    return this.versionInfo.commitDate;
  }

  getCommitMessage() {
    return this.versionInfo.commitMessage;
  }

  getBuildDate() {
    return this.versionInfo.buildDate;
  }

  getVersionString() {
    return `v${this.getVersion()} (Build ${this.getBuildNumber()})`;
  }

  getDetailedVersionString() {
    return `v${this.getVersion()} (Build ${this.getBuildNumber()}, Commit ${this.getCommitHashShort()})`;
  }
}

// Create singleton instance
const versionService = new VersionService();

module.exports = versionService;