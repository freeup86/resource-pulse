/**
 * Recalculate Financials Script
 * 
 * This script recalculates financial metrics for all projects in the system.
 * It's helpful for fixing inconsistencies or after applying schema updates.
 */

const { poolPromise, sql } = require('./config');

const recalculateAllFinancials = async () => {
  try {
    console.log('======================================================');
    console.log('STARTING FINANCIAL RECALCULATION');
    console.log('======================================================');
    console.log('This will recalculate financial metrics for all projects.');
    console.log('------------------------------------------------------');
    
    const pool = await poolPromise;
    
    // Get all projects
    const projectsResult = await pool.request().query(`
      SELECT ProjectID, Name FROM Projects ORDER BY Name
    `);
    
    console.log(`Found ${projectsResult.recordset.length} projects to process.`);
    
    // Process each project
    for (const project of projectsResult.recordset) {
      try {
        console.log(`\nProcessing project: ${project.Name} (ID: ${project.ProjectID})`);
        
        // Recalculate financial metrics
        const result = await pool.request()
          .input('projectId', sql.Int, project.ProjectID)
          .input('createSnapshot', sql.Bit, 1)
          .input('snapshotNotes', sql.NVarChar, 'Generated by recalculate-all-financials.js')
          .execute('sp_RecalculateProjectFinancials');
        
        console.log(`  Financials recalculated successfully.`);
        
        // Get updated financial data
        const financialResult = await pool.request()
          .input('projectId', sql.Int, project.ProjectID)
          .query(`
            SELECT Budget, ActualCost, BudgetUtilization
            FROM Projects
            WHERE ProjectID = @projectId
          `);
        
        const financial = financialResult.recordset[0];
        
        console.log(`  Budget: ${financial.Budget || 0}`);
        console.log(`  Actual Cost: ${financial.ActualCost || 0}`);
        console.log(`  Budget Utilization: ${financial.BudgetUtilization || 0}%`);
        
      } catch (err) {
        console.error(`  Error processing project ${project.Name}:`, err.message);
        console.log(`  Continuing with next project...`);
      }
    }
    
    console.log('\n======================================================');
    console.log('FINANCIAL RECALCULATION COMPLETE');
    console.log('======================================================');
    
    // Close the database connection
    await pool.close();
    process.exit(0);
  } catch (err) {
    console.error('Fatal error during financial recalculation:', err);
    process.exit(1);
  }
};

// Run the recalculation
recalculateAllFinancials();